import{_ as e,c as o,o as n,a as i}from"./app-Cm3qpj-w.js";const a={},t=i('<p>This SCSS code is designed to define and manage container widths for a responsive layout, similar to how Bootstrap handles container elements. The containers are used to align and center content while providing responsive behavior at different breakpoints.</p><h3 id="breakdown-of-the-code" tabindex="-1"><a class="header-anchor" href="#breakdown-of-the-code"><span>Breakdown of the Code:</span></a></h3><h4 id="if-enable-container-classes" tabindex="-1"><a class="header-anchor" href="#if-enable-container-classes"><span><strong><code>@if $enable-container-classes</code></strong></span></a></h4><ul><li>The code block is wrapped in a conditional that checks if the container classes are enabled. This makes it easy to toggle container functionality on or off globally.</li></ul><h4 id="make-container-mixin" tabindex="-1"><a class="header-anchor" href="#make-container-mixin"><span><strong><code>make-container()</code> Mixin</strong></span></a></h4><ul><li><strong><code>.bt-container</code> and <code>.bt-container-fluid</code></strong>: <ul><li>These two classes are the base containers.</li><li><strong><code>.bt-container</code></strong>: Usually has a fixed width that changes with breakpoints.</li><li><strong><code>.bt-container-fluid</code></strong>: Always takes up 100% of the width, regardless of screen size.</li><li>The <code>make-container()</code> mixin is likely responsible for setting up the containerâ€™s padding, width, and other properties.</li></ul></li></ul><h4 id="responsive-containers-each-loop" tabindex="-1"><a class="header-anchor" href="#responsive-containers-each-loop"><span><strong>Responsive Containers (<code>@each</code> loop)</strong></span></a></h4><ul><li><strong><code>.bt-container-#{$breakpoint}</code></strong>: <ul><li>This loop creates classes for each breakpoint defined in <code>$container-max-widths</code>.</li><li>The class name format is <code>.bt-container-{breakpoint}</code>, where <code>{breakpoint}</code> is replaced by the actual breakpoint name like <code>sm</code>, <code>md</code>, <code>lg</code>, etc.</li><li>Each of these classes inherits the <code>bt-container-fluid</code> class, making them fluid until a specific breakpoint is reached.</li></ul></li></ul><h4 id="media-query-adjustments-include-media-breakpoint-up" tabindex="-1"><a class="header-anchor" href="#media-query-adjustments-include-media-breakpoint-up"><span><strong>Media Query Adjustments (<code>@include media-breakpoint-up</code>)</strong></span></a></h4><ul><li>For each breakpoint, a media query is generated using <code>media-breakpoint-up</code>.</li><li>Inside each media query, a <code>%responsive-container-#{$breakpoint}</code> placeholder is created that sets a <code>max-width</code> based on the <code>$container-max-width</code> value associated with that breakpoint.</li></ul><h4 id="extending-responsive-containers" tabindex="-1"><a class="header-anchor" href="#extending-responsive-containers"><span><strong>Extending Responsive Containers</strong></span></a></h4><ul><li><strong>Nested <code>@each</code> loop</strong>: <ul><li>This loop extends the responsive container styles to each smaller or equal breakpoint.</li><li>The code dynamically generates container classes for all possible combinations of breakpoints using the <code>breakpoint-infix()</code> function.</li><li>The loop stops extending once it reaches the current breakpoint being processed, thanks to the <code>$extend-breakpoint</code> flag.</li></ul></li></ul><h3 id="example-of-how-it-works" tabindex="-1"><a class="header-anchor" href="#example-of-how-it-works"><span>Example of How It Works:</span></a></h3><ul><li>Suppose you have breakpoints like <code>sm</code>, <code>md</code>, <code>lg</code>, etc., with corresponding container widths defined in <code>$container-max-widths</code>.</li><li>The code will create: <ul><li><code>.bt-container-sm</code>, <code>.bt-container-md</code>, etc., each behaving like <code>.bt-container-fluid</code> up to their respective breakpoints.</li><li>Once the viewport width matches or exceeds a given breakpoint (e.g., <code>sm</code>), the max-width is applied to contain the content within a centered, fixed-width container.</li><li>The nested loop ensures that smaller breakpoints inherit the properties from larger ones.</li></ul></li></ul>',14),s=[t];function c(r,d){return n(),o("div",null,s)}const h=e(a,[["render",c],["__file","containers.html.vue"]]),p=JSON.parse('{"path":"/components/containers.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Breakdown of the Code:","slug":"breakdown-of-the-code","link":"#breakdown-of-the-code","children":[]},{"level":3,"title":"Example of How It Works:","slug":"example-of-how-it-works","link":"#example-of-how-it-works","children":[]}],"git":{"updatedTime":1723025168000,"contributors":[{"name":"Ehsan","email":"ehsan.k93@gmail.com","commits":1}]},"filePathRelative":"components/containers.md"}');export{h as comp,p as data};

import{_ as s,c as n,o as a,a as p}from"./app-Cm3qpj-w.js";const e={},t=p(`<h1 id="utilities-scss-documentation" tabindex="-1"><a class="header-anchor" href="#utilities-scss-documentation"><span><code>utilities.scss</code> Documentation</span></a></h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>The <code>utilities.scss</code> file provides a mixin for generating utility classes. This mixin allows for the dynamic creation of utility classes based on a map of settings, which can include CSS variables, custom classes, responsive font sizes (RFS), and other properties.</p><h2 id="mixins" tabindex="-1"><a class="header-anchor" href="#mixins"><span>Mixins</span></a></h2><h3 id="generate-utility" tabindex="-1"><a class="header-anchor" href="#generate-utility"><span><code>generate-utility</code></span></a></h3><p>Generates utility classes based on the provided configuration map. It handles various properties, states, and supports generating CSS variables.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><ul><li><strong><code>$utility</code></strong>: A map containing the configuration for the utility class. This map can include: <ul><li><code>values</code>: The values to be applied.</li><li><code>property</code>: The CSS properties to which the values will be applied.</li><li><code>class</code>: Optional custom class name prefix.</li><li><code>css-variable-name</code>: Optional name for the CSS variable.</li><li><code>state</code>: Optional pseudo-classes for state variations.</li><li><code>rfs</code>: Optional flag to handle responsive font sizes.</li><li><code>css-var</code>: Optional flag for using CSS variables.</li><li><code>local-vars</code>: Optional map for local variables.</li><li><code>rtl</code>: Optional flag for right-to-left (RTL) support.</li></ul></li><li><strong><code>$infix</code></strong>: Optional string to be appended to the class name, typically used for responsive breakpoints or modifiers.</li><li><strong><code>$is-rfs-media-query</code></strong>: Boolean indicating whether the utility should be generated within a responsive font size (RFS) media query.</li></ul><h4 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h4><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss" data-title="scss"><pre><code><span class="line"><span class="token keyword">@mixin</span> <span class="token function">generate-utility</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> <span class="token property"><span class="token variable">$infix</span></span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token property"><span class="token variable">$is-rfs-media-query</span></span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property"><span class="token variable">$values</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// If the values are a list or string, convert it into a map</span></span>
<span class="line">  <span class="token keyword">@if</span> <span class="token function">type-of</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">)</span>==<span class="token string">&quot;string&quot;</span> <span class="token operator">or</span> <span class="token function">type-of</span><span class="token punctuation">(</span><span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token selector">!=&quot;list&quot; </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$values</span></span><span class="token punctuation">:</span> <span class="token function">zip</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">,</span> <span class="token variable">$values</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$key</span>, <span class="token variable">$value</span> in <span class="token variable">$values</span> </span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property"><span class="token variable">$properties</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Multiple properties are possible, for example with vertical or horizontal margins or paddings</span></span>
<span class="line">    <span class="token keyword">@if</span> <span class="token function">type-of</span><span class="token punctuation">(</span><span class="token variable">$properties</span><span class="token punctuation">)</span><span class="token selector">==&quot;string&quot; </span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token property"><span class="token variable">$properties</span></span><span class="token punctuation">:</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$properties</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Use custom class if present</span></span>
<span class="line">    <span class="token property"><span class="token variable">$property-class</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token function">map-has-key</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">nth</span><span class="token punctuation">(</span><span class="token variable">$properties</span><span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property"><span class="token variable">$property-class</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$property-class</span> ==<span class="token null keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token variable">$property-class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Use custom CSS variable name if present, otherwise default to \`class\`</span></span>
<span class="line">    <span class="token property"><span class="token variable">$css-variable-name</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token function">map-has-key</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> css-variable-name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> css-variable-name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> class<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// State params to generate pseudo-classes</span></span>
<span class="line">    <span class="token property"><span class="token variable">$state</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token function">map-has-key</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token property"><span class="token variable">$infix</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$property-class</span> ==<span class="token string">&quot;&quot;</span> <span class="token operator">and</span> <span class="token function">str-slice</span><span class="token punctuation">(</span><span class="token variable">$infix</span><span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 1<span class="token punctuation">)</span>==<span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token function">str-slice</span><span class="token punctuation">(</span><span class="token variable">$infix</span><span class="token punctuation">,</span> 2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$infix</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Don&#39;t prefix if value key is null (e.g. with shadow class)</span></span>
<span class="line">    <span class="token property"><span class="token variable">$property-class-modifier</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$property-class</span> ==<span class="token string">&quot;&quot;</span> <span class="token operator">and</span> <span class="token variable">$infix</span> ==<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">@if</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> rfs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Inside the media query</span></span>
<span class="line">      <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$is-rfs-media-query</span> </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property"><span class="token variable">$val</span></span><span class="token punctuation">:</span> <span class="token function">rfs-value</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Do not render anything if fluid and non-fluid values are the same</span></span>
<span class="line">        <span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$val</span> ==<span class="token function">rfs-fluid-value</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token null keyword">null</span><span class="token punctuation">,</span> <span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">@else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> <span class="token function">rfs-fluid-value</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token property"><span class="token variable">$is-css-var</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> css-var<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property"><span class="token variable">$is-local-vars</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> local-vars<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token property"><span class="token variable">$is-rtl</span></span><span class="token punctuation">:</span> <span class="token function">map-get</span><span class="token punctuation">(</span><span class="token variable">$utility</span><span class="token punctuation">,</span> rtl<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$value</span> !=null </span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$is-rtl</span> ==false </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* rtl:begin:remove */</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$is-css-var</span> </span><span class="token punctuation">{</span></span>
<span class="line">        .#<span class="token punctuation">{</span><span class="token variable">$property-class</span> <span class="token operator">+</span> <span class="token variable">$infix</span> <span class="token operator">+</span> <span class="token variable">$property-class-modifier</span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">--<span class="token variable">#{$prefix}</span><span class="token variable">#{$css-variable-name}</span></span><span class="token punctuation">:</span> <span class="token variable">#{$value}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$pseudo</span> in <span class="token variable">$state</span> </span><span class="token punctuation">{</span></span>
<span class="line">          .#<span class="token punctuation">{</span><span class="token variable">$property-class</span> <span class="token operator">+</span> <span class="token variable">$infix</span> <span class="token operator">+</span> <span class="token variable">$property-class-modifier</span><span class="token punctuation">}</span><span class="token selector">-<span class="token variable">#{$pseudo}</span>:<span class="token variable">#{$pseudo}</span> </span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">--<span class="token variable">#{$prefix}</span><span class="token variable">#{$css-variable-name}</span></span><span class="token punctuation">:</span> <span class="token variable">#{$value}</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">@else</span> <span class="token punctuation">{</span></span>
<span class="line">        .#<span class="token punctuation">{</span><span class="token variable">$property-class</span> <span class="token operator">+</span> <span class="token variable">$infix</span> <span class="token operator">+</span> <span class="token variable">$property-class-modifier</span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$property</span> in <span class="token variable">$properties</span> </span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$is-local-vars</span> </span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$local-var</span>, <span class="token variable">$variable</span> in <span class="token variable">$is-local-vars</span> </span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token property">--<span class="token variable">#{$prefix}</span><span class="token variable">#{$local-var}</span></span><span class="token punctuation">:</span> <span class="token variable">#{$variable}</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token property"><span class="token variable">#{$property}</span></span><span class="token punctuation">:</span> <span class="token variable">$value</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$enable-important-utilities</span><span class="token punctuation">,</span> <span class="token important">!important</span><span class="token punctuation">,</span> <span class="token null keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$pseudo</span> in <span class="token variable">$state</span> </span><span class="token punctuation">{</span></span>
<span class="line">          .#<span class="token punctuation">{</span><span class="token variable">$property-class</span> <span class="token operator">+</span> <span class="token variable">$infix</span> <span class="token operator">+</span> <span class="token variable">$property-class-modifier</span><span class="token punctuation">}</span><span class="token selector">-<span class="token variable">#{$pseudo}</span>:<span class="token variable">#{$pseudo}</span> </span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$property</span> in <span class="token variable">$properties</span> </span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$is-local-vars</span> </span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$local-var</span>, <span class="token variable">$variable</span> in <span class="token variable">$is-local-vars</span> </span><span class="token punctuation">{</span></span>
<span class="line">                  <span class="token property">--<span class="token variable">#{$prefix}</span><span class="token variable">#{$local-var}</span></span><span class="token punctuation">:</span> <span class="token variable">#{$variable}</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">              <span class="token property"><span class="token variable">#{$property}</span></span><span class="token punctuation">:</span> <span class="token variable">$value</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token variable">$enable-important-utilities</span><span class="token punctuation">,</span> <span class="token important">!important</span><span class="token punctuation">,</span> <span class="token null keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">@if</span> <span class="token selector"><span class="token variable">$is-rtl</span> ==false </span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* rtl:end:remove */</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Usage Example:</strong></p><div class="language-scss line-numbers-mode" data-highlighter="prismjs" data-ext="scss" data-title="scss"><pre><code><span class="line"><span class="token property"><span class="token variable">$utility-map</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token property">values</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>10px<span class="token punctuation">,</span> 20px<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">property</span><span class="token punctuation">:</span> margin<span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">class</span><span class="token punctuation">:</span> <span class="token string">&quot;m-&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">css-variable-name</span><span class="token punctuation">:</span> <span class="token string">&quot;spacing&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">rfs</span><span class="token punctuation">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@include</span> <span class="token function">generate-utility</span><span class="token punctuation">(</span><span class="token variable">$utility-map</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Notes:</strong></p><ul><li>The <code>generate-utility</code> mixin allows for a high degree of customization for utility classes, including support for CSS variables and RTL (right-to-left) text.</li><li>If <code>rfs</code> is enabled, the mixin will adjust values based on responsive font size settings.</li><li>The mixin supports generating utilities for pseudo-classes and can handle both local and global variables.</li></ul><p>This mixin helps in creating a flexible utility system that adapts to various design requirements and responsive needs.</p>`,15),l=[t];function i(c,o){return a(),n("div",null,l)}const r=s(e,[["render",i],["__file","utilities.html.vue"]]),k=JSON.parse('{"path":"/mixins/utilities.html","title":"utilities.scss Documentation","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Mixins","slug":"mixins","link":"#mixins","children":[{"level":3,"title":"generate-utility","slug":"generate-utility","link":"#generate-utility","children":[]}]}],"git":{"updatedTime":1723029969000,"contributors":[{"name":"Ehsan","email":"ehsan.k93@gmail.com","commits":1}]},"filePathRelative":"mixins/utilities.md"}');export{r as comp,k as data};
